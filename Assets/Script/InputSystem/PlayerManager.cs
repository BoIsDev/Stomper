//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/InputSystem/PlayerManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerManager"",
    ""maps"": [
        {
            ""name"": ""Stomper"",
            ""id"": ""6b99adea-4a83-4fcd-88d6-20585c48bfea"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""97a3842f-e628-49fa-afda-2398ad376952"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""02b8c300-bb4f-493a-af96-95231c7b3672"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""0c6c5c7d-2215-45a0-ac15-a2bbbe82a78f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Duck"",
                    ""type"": ""Button"",
                    ""id"": ""50699c39-3697-44c8-8359-91e69ac0e67d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0acfc9e4-6530-4763-b88a-d8fb661c1329"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""UIbtn"",
                    ""id"": ""e1355c3d-356c-4bbd-a261-2004dae61864"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""57ca68b5-cb44-4d75-9d09-a5ec59480db8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d547f74f-ecb2-46a3-a1e4-006d3694950d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""b8d8307c-0175-4eee-b865-356489d71bf9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""675a4c81-6568-4aa7-b099-5f5c3eb9a069"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4ee53931-ca9b-44fb-9e03-dbc5edf6029a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6604754b-2ca4-4cef-8c35-29a302bf0e8c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6070612-8b92-49da-9abe-7b9e908834c3"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b92d4c32-abe1-48fe-91f2-abb6bd2ef99b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Duck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98b9285e-b7ce-4d3a-8aab-4b6c5988dd43"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Stomper
        m_Stomper = asset.FindActionMap("Stomper", throwIfNotFound: true);
        m_Stomper_Movement = m_Stomper.FindAction("Movement", throwIfNotFound: true);
        m_Stomper_Jump = m_Stomper.FindAction("Jump", throwIfNotFound: true);
        m_Stomper_Roll = m_Stomper.FindAction("Roll", throwIfNotFound: true);
        m_Stomper_Duck = m_Stomper.FindAction("Duck", throwIfNotFound: true);
        m_Stomper_Pause = m_Stomper.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Stomper
    private readonly InputActionMap m_Stomper;
    private List<IStomperActions> m_StomperActionsCallbackInterfaces = new List<IStomperActions>();
    private readonly InputAction m_Stomper_Movement;
    private readonly InputAction m_Stomper_Jump;
    private readonly InputAction m_Stomper_Roll;
    private readonly InputAction m_Stomper_Duck;
    private readonly InputAction m_Stomper_Pause;
    public struct StomperActions
    {
        private @PlayerManager m_Wrapper;
        public StomperActions(@PlayerManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Stomper_Movement;
        public InputAction @Jump => m_Wrapper.m_Stomper_Jump;
        public InputAction @Roll => m_Wrapper.m_Stomper_Roll;
        public InputAction @Duck => m_Wrapper.m_Stomper_Duck;
        public InputAction @Pause => m_Wrapper.m_Stomper_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Stomper; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StomperActions set) { return set.Get(); }
        public void AddCallbacks(IStomperActions instance)
        {
            if (instance == null || m_Wrapper.m_StomperActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StomperActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Duck.started += instance.OnDuck;
            @Duck.performed += instance.OnDuck;
            @Duck.canceled += instance.OnDuck;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IStomperActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Duck.started -= instance.OnDuck;
            @Duck.performed -= instance.OnDuck;
            @Duck.canceled -= instance.OnDuck;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IStomperActions instance)
        {
            if (m_Wrapper.m_StomperActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStomperActions instance)
        {
            foreach (var item in m_Wrapper.m_StomperActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StomperActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StomperActions @Stomper => new StomperActions(this);
    public interface IStomperActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnDuck(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
